        -:    0:Source:multiplication.c
        -:    1:#include "multiplication.h"
        -:    2:
       26:    3:void delete_point(char *mantissa, size_t point_place)
        -:    4:{
      112:    5:    for(size_t i = point_place; i < strlen(mantissa) - 1; i++)
       86:    6:        mantissa[i] = mantissa[i + 1];
       26:    7:    mantissa[strlen(mantissa) - 1]= 0;
       26:    8:}
        -:    9:
       23:   10:void multiplication(char *num1, char *num2, int *result)
        -:   11:{
       23:   12:    int temp = 0;
       23:   13:    size_t index = MAX_MULTI - 1, j = 0, i = 0;
        -:   14:
      172:   15:    for(i = 0; i < strlen(num2); i++)
        -:   16:    {
      149:   17:        temp = 0;
        -:   18:
      994:   19:        for(j = 0; j < strlen(num1); j++)
        -:   20:        {
      845:   21:            int c = (num1[strlen(num1) - j - 1] - '0')*(num2[strlen(num2) - i - 1] - '0');
      845:   22:            c = c + temp;
      845:   23:            temp = c / 10;
      845:   24:            c = c % 10;
      845:   25:            result[index - (i + j)] += c;
        -:   26:        }
        -:   27:
      149:   28:        if(temp)
       40:   29:            result[index - (i + j)] += temp;
        -:   30:    }
        -:   31:
     1403:   32:    for(int i = index; i >= 0 ; i--)
     1380:   33:        if(result[i] >= 10)
        -:   34:        {
      123:   35:            result[i-1] += result[i] / 10;
      123:   36:            result[i] %= 10;
        -:   37:        }
       23:   38:}
        -:   39:
       23:   40:int round_up(int *result)
        -:   41:{
       23:   42:    size_t index = MAX_MULTI - 1, j = 0;
        -:   43:
     1142:   44:    while(result[j] == 0)
     1119:   45:        j++;
        -:   46:
       23:   47:    if (index - j < 30)
       16:   48:        return EXIT_SUCCESS;
        -:   49:
        7:   50:    if (result[j + 30] < 5)
        1:   51:        return EXIT_SUCCESS;
        -:   52:
        6:   53:    result[j + 29]++;
        -:   54:
      114:   55:    for(int i = j + 29; i >= 0 ; i--)
        -:   56:    {
      114:   57:        if(result[i] >= 10)
        -:   58:        {
      108:   59:            result[i-1] += result[i] / 10;
      108:   60:            result[i] %= 10;
      108:   61:            if (result[j] == 0)
    #####:   62:                return EXIT_FAILURE;
        -:   63:        }
        -:   64:        else
        6:   65:            return EXIT_SUCCESS;
        -:   66:    }
    #####:   67:    return EXIT_SUCCESS;
        -:   68:}
        -:   69:
       23:   70:int check_the_order(int order, int *result, int *count)
        -:   71:{
       23:   72:    size_t j = 0;
        -:   73:
     1142:   74:    while(result[j] == 0)
     1119:   75:        j++;
       23:   76:    *count =  MAX_MULTI - j + order;
        -:   77:
       23:   78:    if (abs(*count) > 99999)
        2:   79:        return EXIT_FAILURE;
        -:   80:
       21:   81:    return EXIT_SUCCESS;
        -:   82:}
        -:   83:
        -:   84:
