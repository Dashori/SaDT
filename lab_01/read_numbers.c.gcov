        -:    0:Source:read_numbers.c
        -:    1:#include "read_numbers.h"
        -:    2:
       37:    3:int read_real_number(struct real_number *num)
        -:    4:{
       37:    5:    printf("                      +...............................e+.....\n");
       37:    6:    printf("Enter the real number:");
        -:    7:
       37:    8:    if(fgets(num->real_num, MAX_STR, stdin) == NULL)
    #####:    9:        return ERROR_IN_INPUT;
        -:   10:
       37:   11:    if(trim(num->real_num))
        8:   12:        return ERROR_IN_INPUT;
        -:   13:
       29:   14:    if(input_mantissa(num))
    #####:   15:        return ERROR_IN_INPUT;
        -:   16:
       29:   17:    if(input_order(num))
        3:   18:        return ERROR_IN_INPUT;
        -:   19:
       26:   20:    return EXIT_SUCCESS;
        -:   21:
        -:   22:}
        -:   23:
       29:   24:int input_mantissa(struct real_number *num)
        -:   25:{
       29:   26:    if(is_sign_correct(num->real_num[0]))
    #####:   27:        return ERROR_IN_INPUT;
        -:   28:
       29:   29:    num->sign_mantissa = num->real_num[0];
       29:   30:    num->point_place = 0;
        -:   31:
      276:   32:    for(size_t i = 1; num->real_num[i] != 'e'; i++)
        -:   33:    {
      247:   34:        if (num->real_num[i] == '.')
       29:   35:            num->point_place = i - 1;
      218:   36:        else if (num->real_num[i] != '.' && !isdigit(num->real_num[i]))
    #####:   37:            return ERROR_IN_INPUT;
      247:   38:        num->mantissa[i-1] = num->real_num[i];
        -:   39:    }
        -:   40:
       29:   41:    if(!num->point_place)
    #####:   42:        return ERROR_IN_INPUT;
        -:   43:
       29:   44:    if(strlen(num->mantissa) >= MAX_MANTISSA)
    #####:   45:        return ERROR_IN_INPUT;
        -:   46:
       29:   47:    return EXIT_SUCCESS;
        -:   48:}
        -:   49:
       29:   50:int input_order(struct real_number *num)
        -:   51:{
       29:   52:    if(num->real_num[strlen(num->mantissa) + 1] != 'e')
    #####:   53:        return ERROR_IN_INPUT;
        -:   54:
       29:   55:    if(is_sign_correct(num->real_num[strlen(num->mantissa) + 2]))
    #####:   56:        return ERROR_IN_INPUT;
       29:   57:    num->sign_order = num->real_num[strlen(num->mantissa) + 2];
        -:   58:
        -:   59:    char order_char[MAX_ORDER_1];
       29:   60:    size_t j = 0;
        -:   61:
      109:   62:    for(size_t i = strlen(num->mantissa) + 3; i < strlen(num->real_num); i++)
        -:   63:    {
       81:   64:        if(!isdigit(num->real_num[i]))
        1:   65:            return ERROR_IN_INPUT;
       80:   66:        order_char[j++] = num->real_num[i];
        -:   67:    }
        -:   68:
       28:   69:    if(strlen(order_char) > 5)
        2:   70:        return ERROR_IN_INPUT;
       26:   71:    num->order = atoi(order_char);
        -:   72:
       26:   73:    if(num->sign_order == '-')
       21:   74:        num->order *= -1;
        -:   75:
       26:   76:    num->order = num->order - strlen(num->mantissa) + 1 + num->point_place;
        -:   77:
       26:   78:    return EXIT_SUCCESS;
        -:   79:}
        -:   80:
       26:   81:int read_int_number(struct int_number *num)
        -:   82:{
       26:   83:    printf("\n                         +..............................\n");
       26:   84:    printf("Enter the integer number:");
        -:   85:
       26:   86:    if(fgets(num->int_num, MAX_INT, stdin) == NULL)
    #####:   87:        return ERROR_IN_INPUT;
        -:   88:
       26:   89:    if(trim(num->int_num))
        1:   90:        return ERROR_IN_INPUT;
        -:   91:
       25:   92:    if(is_sign_correct(num->int_num[0]))
        2:   93:        return ERROR_IN_INPUT;
        -:   94:
       23:   95:    num->sign_int = num->int_num[0];
        -:   96:
      172:   97:    for(size_t i = 1; i < strlen(num->int_num); i++)
        -:   98:    {
      149:   99:        if(!isdigit(num->int_num[i]))
    #####:  100:            return ERROR_IN_INPUT;
      149:  101:        num->int_num[i-1] = num->int_num[i];
        -:  102:    }
       23:  103:    num->int_num[strlen(num->int_num) - 1] = 0;
        -:  104:
       23:  105:    return EXIT_SUCCESS;
        -:  106:}
        -:  107:
       63:  108:int trim(char *str)
        -:  109:{
       63:  110:    if(str[strlen(str) - 1] != '\n')
        9:  111:        return EXIT_FAILURE;
       54:  112:    str[strlen(str) - 1] = 0;
        -:  113:
       54:  114:    return EXIT_SUCCESS;
        -:  115:}
        -:  116:
       83:  117:int is_sign_correct(char sign)
        -:  118:{
       83:  119:    if (sign != '-' && sign != '+')
        2:  120:        return EXIT_FAILURE;
        -:  121:
       81:  122:    return EXIT_SUCCESS;
        -:  123:}
